generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  key        String      @unique(map: "User_UN") @db.VarChar(100)
  code       String      @db.VarChar(30)
  email      String      @unique(map: "user_UN_1") @db.VarChar(30)
  gender     User_gender
  nickname   String      @unique(map: "user_UN_2") @db.VarChar(30)
  profileUrl String      @db.VarChar(2083)
  birthday   DateTime    @db.Date
  createdAt  DateTime    @default(now()) @db.DateTime(0)
  deletedAt  DateTime?   @db.DateTime(0)
  boyCouple  Couple[]    @relation("Couple_boyIdToUser")
  girlCouple Couple[]    @relation("Couple_girlIdToUser")
}

model Couple {
  id        Int      @id @default(autoincrement())
  startDate DateTime @db.Date
  isEnd     Boolean
  boyId     Int?
  girlId    Int?
  boy       User?    @relation("Couple_boyIdToUser", fields: [boyId], references: [id], onUpdate: Restrict, map: "Couple_FK")
  girl      User?    @relation("Couple_girlIdToUser", fields: [girlId], references: [id], onUpdate: Restrict, map: "Couple_FK_1")
  Route     Route[]

  @@index([boyId], map: "Couple_FK")
  @@index([girlId], map: "Couple_FK_1")
}

model GeoCoord {
  id        Int   @id @default(autoincrement())
  routeId   Int
  longitude Float @db.Float
  latitude  Float @db.Float
  route     Route @relation(fields: [routeId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "geocoord_ibfk_1")

  @@index([routeId], map: "geocoord_ibfk_1")
}

model Place {
  id           Int          @id @default(autoincrement())
  fullLocation String       @db.VarChar(100)
  name         String       @db.VarChar(50)
  placePhoto   PlacePhoto[]
}

model PlacePhoto {
  id      Int    @id @default(autoincrement())
  url     String @db.VarChar(100)
  placeId Int
  place   Place  @relation(fields: [placeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "placephoto_ibfk_1")

  @@index([placeId], map: "placeId")
}

model Route {
  id         Int          @id @default(autoincrement())
  coupleId   Int
  date       DateTime     @db.Date
  zoomLevel  Float        @db.Float
  title      String       @db.VarChar(50)
  content    String       @db.VarChar(50)
  location   String?      @db.VarChar(50)
  couple     Couple       @relation(fields: [coupleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Route_FK")
  geoCoord   GeoCoord[]
  routePhoto RoutePhoto[]

  @@index([coupleId], map: "Route_FK")
}

model RoutePhoto {
  id      Int    @id @default(autoincrement())
  url     String @db.VarChar(500)
  routeId Int
  route   Route  @relation(fields: [routeId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "RoutePhoto_FK")

  @@index([routeId], map: "RoutePhoto_FK")
}

enum User_gender {
  M
  F
}
